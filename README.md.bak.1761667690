# Care Fabric Experience - Remote + Display System

This project consists of two main components:
1. **Remote Control** - The spinning wheel interface for selecting products
2. **Display** - The TV/monitor that shows content based on remote selections

## Architecture

- **Frontend**: React + TypeScript
- **Backend**: Node.js + Express + Socket.io
- **Communication**: WebSocket real-time bidirectional communication

## Setup Instructions

### 1. Install Dependencies

```bash
# Install frontend dependencies
npm install

# Install server dependencies
cd server
npm install
cd ..
```

### 2. Running the Application

#### Option A: Run everything together (recommended)
```bash
npm run dev
```

This will start:
- Frontend dev server on http://localhost:3000
- Backend WebSocket server on http://localhost:3001

#### Option B: Run separately
```bash
# Terminal 1: Start the backend server
cd server
npm start

# Terminal 2: Start the frontend
npm start
```

### 3. Access the Pages

- **Remote Control**: http://localhost:3000
- **Display**: http://localhost:3000/display

## Usage

1. Open the **Remote Control** page on one device (or browser window)
2. Open the **Display** page on another device/monitor/window
3. The green connection indicator shows both are connected to the server
4. Select a category on the wheel, then click a product button
5. Watch the Display update in real-time!

## Running on Separate Machines

To run the remote and display on different computers:

### On the Server Machine:
1. Find your local IP address:
   - Windows: `ipconfig` (look for IPv4 Address)
   - Mac/Linux: `ifconfig` or `ip addr`

2. Start the server:
   ```bash
   cd server
   npm start
   ```

3. Note the IP address (e.g., 192.168.1.100)

### On Client Machines:

1. Create a `.env` file in the root directory:
   ```
   REACT_APP_SERVER_URL=http://192.168.1.100:3001
   ```

2. Build and run the React app:
   ```bash
   npm start
   ```

3. On Remote Control machine: Navigate to `http://localhost:3000`
4. On Display machine: Navigate to `http://localhost:3000/display`

## Configuration

### Environment Variables

Create a `.env` file in the root directory:

```env
REACT_APP_SERVER_URL=http://localhost:3001
```

For production or separate machines, replace `localhost` with the server's IP address.

### Server Port

The server runs on port 3001 by default. To change it, edit `server/server.js`:

```javascript
const PORT = process.env.PORT || 3001;
```

## Product Configuration

To add or modify products displayed on the screen, edit the `PRODUCT_CONTENT` object in `src/components/Display.tsx`:

```typescript
const PRODUCT_CONTENT: Record<string, {
    title: string;
    description: string;
    color: string;
}> = {
    'ProductId': {
        title: 'Product Name',
        description: 'Product description here',
        color: '#hexcolor'
    }
};
```

## Troubleshooting

### Connection Issues

- Check that the server is running on port 3001
- Verify firewall settings allow connections on port 3001
- Ensure both machines are on the same network
- Check the connection indicator (green = connected, yellow = connecting, red = disconnected)

### Display Not Updating

- Check browser console for errors
- Verify WebSocket connection is established (check Network tab in DevTools)
- Ensure server is running and accessible
- Try refreshing both pages

## Tech Stack

- **React 19** - UI framework
- **TypeScript** - Type safety
- **Socket.io** - Real-time WebSocket communication
- **Express** - Backend server
- **Framer Motion** - Animations
- **React Router** - Page routing

## Project Structure

```
carefabricexperience/
├── src/
│   ├── components/
│   │   ├── CareExperience.tsx    # Remote control page
│   │   ├── Display.tsx            # Display page
│   │   ├── SpinWheel.tsx          # Spinning wheel component
│   │   └── SubsectionRing.tsx     # Product button ring
│   └── App.tsx                    # Router setup
├── server/
│   ├── server.js                  # WebSocket server
│   └── package.json               # Server dependencies
└── package.json                   # Frontend dependencies
```

## Future Enhancements

- [ ] Add authentication for remote control
- [ ] Save display state to database
- [ ] Add slide transitions between products
- [ ] Support multiple concurrent displays
- [ ] Add admin panel for content management
- [ ] Include video/image content for products
- [ ] Add analytics tracking
